#!/usr/bin/env python3

import sys
import typing
import argparse
from pathlib import PurePath


def make_parser():
    parser = argparse.ArgumentParser(
        description='The same as `care\' except that it does not attempt to '
                    'parse any archive file by itself, thus does not require '
                    'any dependencies other than python3. The content of '
                    'the archive, one entry per line, should be present in '
                    'stdin.')
    parser.add_argument('-l', '--list', action='store_true',
                        help='rather than print the count, list all unique '
                             'root entries')
    return parser


# This function is the same as in `care'
def get_root_entry(tokenized_entry: list):
    while len(tokenized_entry) and tokenized_entry[0] in ['.', '..']:
        tokenized_entry = tokenized_entry[1:]
    root = None
    if len(tokenized_entry):
        root = tokenized_entry[0]
    return root


# This function is the same as in `care'
def count_root_entries(entry_names, return_root_entries=False):
    """
    :param entry_names: the names of entries in the archive
    :param return_root_entries: if True, also returns the unique root entires
    :return: the count of root entries
    """
    tokenized_entries = iter(e.parts for e in entry_names)
    root_entries = map(get_root_entry, tokenized_entries)
    _seen = set()
    uniq_root_entries = []
    for e in root_entries:
        if e not in _seen:
            _seen.add(e)
            uniq_root_entries.append(e)
    count = len(uniq_root_entries)
    if return_root_entries:
        return count, uniq_root_entries
    else:
        return count


def remove_trailing_newline(line: str) -> str:
    if line.endswith('\n'):
        line = line[:-1]
    return line


def get_archive_entries_from_stdin() -> typing.Iterable[PurePath]:
    return map(PurePath, map(remove_trailing_newline, sys.stdin))


def main():
    args = make_parser().parse_args()
    entries = get_archive_entries_from_stdin()
    if args.list:
        _, rentries = count_root_entries(entries, return_root_entries=True)
        print('\n'.join(rentries))
    else:
        count = count_root_entries(entries)
        print(count)


if __name__ == '__main__':
    try:
        main()
    except (KeyboardInterrupt, BrokenPipeError):
        sys.exit(130)
